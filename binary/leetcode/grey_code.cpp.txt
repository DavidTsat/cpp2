#include <vector>
#include <cmath>
#include <functional>
#include <algorithm>
#include <iostream>

using namespace std;

class Solution {
        vector<int> v;

        void f(int n)
        {
                v.push_back((v[v.size() - 1] << 1) | v[v.size() - 1]);
                for (int i = v.size() - 3; i >= 0; --i)
                {
                        v.push_back(v[i] | (1<<(n-1)));
                }
        }
public:
    vector<int> grayCode(int n) {

        if (n == 0)
                return v;

        v.push_back(0);
        v.push_back(1);


        for (int i = 2; i <= n; ++i)
        {
                f(i);
        }

        //v.push_back((1 << (n-1)) | (1 << (n-2)));

        return v;
    }
};

int main()
{
        Solution s;
        std::function<void(const vector<int>&)> p = [](const vector<int>& v){ std::for_each(v.cbegin(), v.cend(), [](int a) {cout << a << ' ';}); cout << endl;};

        for (int i = 3 ; i <= 3; ++i)
        {
                vector<int> v = s.grayCode(i);
                p(v);
        }
        return 0;
}